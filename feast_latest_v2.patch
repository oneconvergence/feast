diff --git a/sdk/python/feast/cli.py b/sdk/python/feast/cli.py
index 91815d30..98e37cea 100644
--- a/sdk/python/feast/cli.py
+++ b/sdk/python/feast/cli.py
@@ -13,6 +13,7 @@
 # limitations under the License.
 import json
 import logging
+import os
 import warnings
 from datetime import datetime
 from pathlib import Path
@@ -581,21 +582,30 @@ def materialize_incremental_command(ctx: click.Context, end_ts: str, views: List
     "--template",
     "-t",
     type=click.Choice(
-        ["local", "gcp", "aws", "snowflake", "spark", "postgres", "hbase"],
+        ["local", "gcp", "aws", "snowflake", "spark", "postgres", "hbase", "dkube"],
         case_sensitive=False,
     ),
     help="Specify a template for the created project",
     default="local",
 )
-def init_command(project_directory, minimal: bool, template: str):
+@click.option(
+    "--git_url",
+    "-g",
+    help="Git url of the project"
+)
+def init_command(project_directory, minimal: bool, template: str, git_url: str):
     """Create a new Feast repository"""
+    if template.lower() == "dkube":
+        if not git_url:
+            os.exit("Please specify Github URL of project.")
+        project_directory = git_url.split("/")[-1].split(".git")[0]
     if not project_directory:
         project_directory = generate_project_name()
 
     if minimal:
         template = "minimal"
 
-    init_repo(project_directory, template)
+    init_repo(project_directory, template, git_url)
 
 
 @cli.command("serve")
diff --git a/sdk/python/feast/feature_store.py b/sdk/python/feast/feature_store.py
index c49ce7dc..b2cac094 100644
--- a/sdk/python/feast/feature_store.py
+++ b/sdk/python/feast/feature_store.py
@@ -854,6 +854,40 @@ class FeatureStore:
             services_to_update,
         )
 
+        add_odfvs = [o.name for o in odfvs_to_update]
+        add_sfvs = [s.name for s in sfvs_to_update]
+        add_entities = [{
+            'name': ent.name,
+            'data_type': ent.value_type.name
+            }
+            for ent in entities_to_update]
+
+        add_feature_views = [{
+            'name': fv.name,
+            'entities': fv.entities
+        }
+        for fv in views_to_update]
+
+        add_feature_services = [{
+            'name': fs.name,
+            'features': fs.features
+        }
+        for fs in services_to_update]
+
+        add_data_sources = [ds.name for ds in data_sources_to_update]
+
+        infra_update = {
+            "project": self.project,
+            "to_add": {
+                "entities": add_entities,
+                "feature_views": add_feature_views,
+                "odfvs": add_odfvs,
+                "feature_services": add_feature_services,
+                "sfvs": add_sfvs,
+                "data_sources": add_data_sources
+            }
+        }
+
         # Add all objects to the registry and update the provider's infrastructure.
         for ds in data_sources_to_update:
             self._registry.apply_data_source(ds, project=self.project, commit=False)
@@ -899,6 +933,37 @@ class FeatureStore:
                 ob for ob in objects_to_delete if isinstance(ob, ValidationReference)
             ]
 
+            delete_odfvs = [o.name for o in odfvs_to_delete]
+
+            delete_entities = [{
+                'name': ent.name,
+                'data_type': ent.value_type.name
+                }
+                for ent in entities_to_delete]
+
+            delete_feature_views = [{
+                'name': fv.name,
+                'entities': fv.entities
+            }
+            for fv in views_to_delete]
+
+            delete_feature_services = [{
+                'name': fs.name,
+                'features': fs.features
+            }
+            for fs in services_to_delete]
+
+            delete_data_sources = [ds.name for ds in data_sources_to_delete]
+            delete_sfvs = [sf.name for sf in sfvs_to_delete]
+            infra_update["to_delete"] = {
+                "entities": delete_entities,
+                "feature_views": delete_feature_views,
+                "odfvs": delete_odfvs,
+                "feature_services": delete_feature_services,
+                "data_sources": delete_data_sources,
+                "sfvs": delete_sfvs
+            }
+
             for data_source in data_sources_to_delete:
                 self._registry.delete_data_source(
                     data_source.name, project=self.project, commit=False
@@ -932,6 +997,10 @@ class FeatureStore:
                     validation_references.name, project=self.project, commit=False
                 )
 
+        if "dkuberegistrystore" == self._registry._registry_store.__class__.__name__.lower():
+            self._registry.update_newly_added_attrs(self.project, infra_update)
+
+        #TODO(VK): Rollback db changes incase of failure.
         self._get_provider().update_infra(
             project=self.project,
             tables_to_delete=views_to_delete + sfvs_to_delete if not partial else [],
@@ -941,7 +1010,11 @@ class FeatureStore:
             partial=partial,
         )
 
-        self._registry.commit()
+        if "dkuberegistrystore" == self._registry._registry_store.__class__.__name__.lower():
+            self._registry.commit(
+                project=self.project, to_add=infra_update['to_add'], to_delete=infra_update['to_delete'])
+        else:
+            self._registry.commit()
 
         # go server needs to be reloaded to apply new configuration.
         # we're stopping it here
@@ -959,7 +1032,7 @@ class FeatureStore:
         entities = self.list_entities()
 
         self._get_provider().teardown_infra(self.project, tables, entities)
-        self._registry.teardown()
+        self._registry.teardown(self.project)
         self._teardown_go_server()
 
     @log_exceptions_and_usage
@@ -1212,6 +1285,13 @@ class FeatureStore:
             <BLANKLINE>
             ...
         """
+        if "dkuberegistrystore" == self._registry._registry_store.__class__.__name__.lower():
+            # Proxy materialize call to online server.
+            self._get_provider().proxy_materialize_incremental(
+                end_date, feature_views
+            )
+            return
+
         feature_views_to_materialize = self._get_feature_views_to_materialize(
             feature_views
         )
@@ -1300,6 +1380,13 @@ class FeatureStore:
             <BLANKLINE>
             ...
         """
+        if "dkuberegistrystore" == self._registry._registry_store.__class__.__name__.lower():
+            # Proxy materialize call to online server.
+            self._get_provider().proxy_materialize_incremental(
+                end_date, feature_views
+            )
+            return
+
         if utils.make_tzaware(start_date) > utils.make_tzaware(end_date):
             raise ValueError(
                 f"The given start_date {start_date} is greater than the given end_date {end_date}."
diff --git a/sdk/python/feast/infra/passthrough_provider.py b/sdk/python/feast/infra/passthrough_provider.py
index 8c6dd831..362fb13e 100644
--- a/sdk/python/feast/infra/passthrough_provider.py
+++ b/sdk/python/feast/infra/passthrough_provider.py
@@ -303,3 +303,22 @@ class PassthroughProvider(Provider):
             start_date=make_tzaware(start_date),
             end_date=make_tzaware(end_date),
         )
+
+    def proxy_materialize(
+        self,
+        start_date: datetime,
+        end_date: datetime,
+        feature_views:Optional[List[str]] = None
+    ) -> None:
+        self.online_store.process_materialize(
+            self.repo_config, start_date, end_date, feature_views
+        )
+
+    def proxy_materialize_incremental(
+        self,
+        end_date: datetime,
+        feature_views:Optional[List[str]] = None
+    ) -> None:
+        self.online_store.process_materialize_incremental(
+            self.repo_config, end_date, feature_views
+        )
diff --git a/sdk/python/feast/registry.py b/sdk/python/feast/registry.py
index f72fd717..b940640b 100644
--- a/sdk/python/feast/registry.py
+++ b/sdk/python/feast/registry.py
@@ -1749,18 +1749,27 @@ class Registry(BaseRegistry):
             if project_metadata.project == project
         ]
 
-    def commit(self):
+    def commit(self, **kwargs):
         """Commits the state of the registry cache to the remote registry store."""
-        if self.cached_registry_proto:
+        if "dkuberegistrystore" == self._registry_store.__class__.__name__.lower():
+            assert 'to_add' in kwargs
+            assert 'to_delete' in kwargs
+            if self.cached_registry_proto:
+                self._registry_store.update_registry_proto(self.cached_registry_proto, **kwargs)
+        elif self.cached_registry_proto:
             self._registry_store.update_registry_proto(self.cached_registry_proto)
 
     def refresh(self, project: Optional[str]):
         """Refreshes the state of the registry cache by fetching the registry state from the remote registry store."""
         self._get_registry_proto(project=project, allow_cache=False)
 
-    def teardown(self):
+    def teardown(self, **kwargs):
         """Tears down (removes) the registry."""
-        self._registry_store.teardown()
+        if "dkuberegistrystore" == self._registry_store.__class__.__name__.lower():
+            assert 'project' in kwargs
+            self._registry_store.teardown(project=kwargs['project'])
+        else:
+            self._registry_store.teardown()
 
     def proto(self) -> RegistryProto:
         return self.cached_registry_proto or RegistryProto()
diff --git a/sdk/python/feast/repo_operations.py b/sdk/python/feast/repo_operations.py
index 9a5e64f8..d47ec4a5 100644
--- a/sdk/python/feast/repo_operations.py
+++ b/sdk/python/feast/repo_operations.py
@@ -10,6 +10,7 @@ from pathlib import Path
 from typing import List, Set, Union
 
 import click
+import git
 from click.exceptions import BadParameter
 
 from feast import PushSource
@@ -22,7 +23,12 @@ from feast.feature_store import FeatureStore
 from feast.feature_view import DUMMY_ENTITY, FeatureView
 from feast.names import adjectives, animals
 from feast.on_demand_feature_view import OnDemandFeatureView
-from feast.registry import FEAST_OBJECT_TYPES, FeastObjectType, Registry
+from feast.registry import (
+    FEAST_OBJECT_TYPES,
+    FeastObjectType,
+    Registry,
+    get_registry_store_class_from_type,
+)
 from feast.repo_config import RepoConfig
 from feast.repo_contents import RepoContents
 from feast.request_feature_view import RequestFeatureView
@@ -336,7 +342,7 @@ def cli_check_repo(repo_path: Path):
 
 
 @log_exceptions_and_usage
-def init_repo(repo_name: str, template: str):
+def init_repo(repo_name: str, template: str, git_url: str):
     import os
     from distutils.dir_util import copy_tree
     from pathlib import Path
@@ -362,6 +368,9 @@ def init_repo(repo_name: str, template: str):
         print()
         sys.exit(1)
 
+    if git_url:
+        update_dkube_project(git_url)
+
     # Copy template directory
     template_path = str(Path(Path(__file__).parent / "templates" / template).absolute())
     if not os.path.exists(template_path):
@@ -417,3 +426,19 @@ def replace_str_in_file(file_path, match_str, sub_str):
 def generate_project_name() -> str:
     """Generates a unique project name"""
     return f"{random.choice(adjectives)}_{random.choice(animals)}"
+
+
+def update_dkube_project(repo_name:str, git_url: str):
+    repo_path = Path(os.path.join(Path.cwd(), repo_name))
+    cls = get_registry_store_class_from_type("dkubefs.dkube_registry.DkubeRegistryStore")
+    dkube_reg = cls(None, repo_path)
+    dkube_reg.update_dkube_project(repo_name)
+    repo = git.Repo.clone_from(git_url, repo_path)
+    gitc = git.Git()
+    gitc.pull()
+    branches = gitc.branch("--all").split()
+    dev_branches = list(filter(lambda b: "remotes/origin/dev" == b, branches))
+    if dev_branches:
+        gitc.checkout("-t", "dev", "origin/dev")
+    else:
+        gitc.checkout("dev")
