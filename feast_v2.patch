diff --git a/sdk/python/feast/cli.py b/sdk/python/feast/cli.py
index 91815d30..98e37cea 100644
--- a/sdk/python/feast/cli.py
+++ b/sdk/python/feast/cli.py
@@ -13,6 +13,7 @@
 # limitations under the License.
 import json
 import logging
+import os
 import warnings
 from datetime import datetime
 from pathlib import Path
@@ -581,21 +582,30 @@ def materialize_incremental_command(ctx: click.Context, end_ts: str, views: List
     "--template",
     "-t",
     type=click.Choice(
-        ["local", "gcp", "aws", "snowflake", "spark", "postgres", "hbase"],
+        ["local", "gcp", "aws", "snowflake", "spark", "postgres", "hbase", "dkube"],
         case_sensitive=False,
     ),
     help="Specify a template for the created project",
     default="local",
 )
-def init_command(project_directory, minimal: bool, template: str):
+@click.option(
+    "--git_url",
+    "-g",
+    help="Git url of the project"
+)
+def init_command(project_directory, minimal: bool, template: str, git_url: str):
     """Create a new Feast repository"""
+    if template.lower() == "dkube":
+        if not git_url:
+            os.exit("Please specify Github URL of project.")
+        project_directory = git_url.split("/")[-1].split(".git")[0]
     if not project_directory:
         project_directory = generate_project_name()
 
     if minimal:
         template = "minimal"
 
-    init_repo(project_directory, template)
+    init_repo(project_directory, template, git_url)
 
 
 @cli.command("serve")
diff --git a/sdk/python/feast/repo_operations.py b/sdk/python/feast/repo_operations.py
index 9a5e64f8..3b3d7178 100644
--- a/sdk/python/feast/repo_operations.py
+++ b/sdk/python/feast/repo_operations.py
@@ -10,6 +10,7 @@ from pathlib import Path
 from typing import List, Set, Union
 
 import click
+import git
 from click.exceptions import BadParameter
 
 from feast import PushSource
@@ -336,7 +337,7 @@ def cli_check_repo(repo_path: Path):
 
 
 @log_exceptions_and_usage
-def init_repo(repo_name: str, template: str):
+def init_repo(repo_name: str, template: str, git_url: str):
     import os
     from distutils.dir_util import copy_tree
     from pathlib import Path
@@ -348,6 +349,8 @@ def init_repo(repo_name: str, template: str):
             message="Name should be alphanumeric values and underscores but not start with an underscore",
             param_hint="PROJECT_DIRECTORY",
         )
+    if git_url:
+        create_dkube_project(git_url)
     repo_path = Path(os.path.join(Path.cwd(), repo_name))
     repo_path.mkdir(exist_ok=True)
     repo_config_path = repo_path / "feature_store.yaml"
@@ -417,3 +420,16 @@ def replace_str_in_file(file_path, match_str, sub_str):
 def generate_project_name() -> str:
     """Generates a unique project name"""
     return f"{random.choice(adjectives)}_{random.choice(animals)}"
+
+
+def create_dkube_project(repo_name:str, git_url: str):
+    repo_path = Path(os.path.join(Path.cwd(), repo_name))
+    repo = git.Repo.clone_from(git_url, repo_path)
+    gitc = git.Git()
+    gitc.pull()
+    branches = gitc.branch("--all").split()
+    dev_branches = list(filter(lambda b: "remotes/origin/dev" == b, branches))
+    if dev_branches:
+        gitc.checkout("-t", "dev", "origin/dev")
+    else:
+        gitc.checkout("dev")
diff --git a/sdk/python/feast/templates/dkube/bootstrap.py b/sdk/python/feast/templates/dkube/bootstrap.py
new file mode 100644
index 00000000..4449e483
--- /dev/null
+++ b/sdk/python/feast/templates/dkube/bootstrap.py
@@ -0,0 +1,14 @@
+def bootstrap():
+    pass
+
+
+def replace_str_in_file(file_path, match_str, sub_str):
+    with open(file_path, "r") as f:
+        contents = f.read()
+    contents = contents.replace(match_str, sub_str)
+    with open(file_path, "wt") as f:
+        f.write(contents)
+
+
+if __name__ == "__main__":
+    bootstrap()
diff --git a/sdk/python/feast/templates/dkube/example.py b/sdk/python/feast/templates/dkube/example.py
new file mode 100644
index 00000000..19551d73
--- /dev/null
+++ b/sdk/python/feast/templates/dkube/example.py
@@ -0,0 +1,41 @@
+# This is an example feature definition file. Please edit this
+# accordingly.
+
+from google.protobuf.duration_pb2 import Duration
+
+from feast import Entity, Feature, FeatureService, FeatureView, ValueType
+from provider.sdk.dkubefs.mysqlserver_source import MySQLServerSource
+
+# Read data from MYSQL offline store. We have pre-populated our data there.
+# See Feast documentation for more info.
+driver_hourly_stats = MySQLServerSource(
+    table_ref="driver_hourly_stats",
+    event_timestamp_column="event_timestamp",
+    created_timestamp_column="created",
+)
+
+# Define an entity for the driver. You can think of entity as a primary key used to
+# fetch features.
+driver = Entity(name="driver_id", value_type=ValueType.INT64, description="driver id",)
+
+# Our offline store contain sample data that includes a driver_id column, timestamps and
+# three feature column. Here we define a Feature View that will allow us to serve this
+# data to our model online.
+driver_hourly_stats_view = FeatureView(
+    name="driver_hourly_stats",
+    entities=[driver],
+    ttl=Duration(seconds=8640000000 * 1),
+    features=[
+        Feature(name="conv_rate", dtype=ValueType.FLOAT),
+        Feature(name="acc_rate", dtype=ValueType.FLOAT),
+        Feature(name="avg_daily_trips", dtype=ValueType.INT64),
+    ],
+    online=True,
+    batch_source=driver_hourly_stats,
+    tags={},
+)
+
+
+driver_stats_fs = FeatureService(
+    name="driver_activity", features=[driver_hourly_stats_view]
+)
diff --git a/sdk/python/feast/templates/dkube/feature_store.yaml b/sdk/python/feast/templates/dkube/feature_store.yaml
new file mode 100644
index 00000000..2caaaf2a
--- /dev/null
+++ b/sdk/python/feast/templates/dkube/feature_store.yaml
@@ -0,0 +1,9 @@
+project: my_project
+registry:
+    registry_store_type: dkubefs.dkube_registry.DkubeRegistryStore
+    path: ""
+provider: dkubefs.dkube_provider.DkubeProvider
+online_store:
+    type: dkubefs.dkube_store.DkubeOnlineStore
+offline_store:
+    type: dkubefs.mysqlserver.MySQLOfflineStore
