diff --git a/sdk/python/feast/feature_store.py b/sdk/python/feast/feature_store.py
index 9655c5d1..010bfded 100644
--- a/sdk/python/feast/feature_store.py
+++ b/sdk/python/feast/feature_store.py
@@ -143,7 +143,7 @@ class FeatureStore:
         """
         registry_config = self.config.get_registry_config()
         registry = Registry(registry_config, repo_path=self.repo_path)
-        registry.refresh()
+        registry.refresh(project=self.project)
 
         self._registry = registry
 
@@ -511,6 +511,38 @@ class FeatureStore:
                 table, project=self.project, commit=False
             )
 
+        add_odfvs = [o.name for o in odfvs_to_update]
+        add_feature_tables = [ft.name for ft in tables_to_update]
+
+        add_entities = [{
+            'name': ent.name,
+            'data_type': ent.value_type.name
+            }
+            for ent in entities_to_update]
+
+        add_feature_views = [{
+            'name': fv.name,
+            'entities': fv.entities
+        }
+        for fv in views_to_update]
+
+        add_feature_services = [{
+            'name': fs.name,
+            'features': fs.features
+        }
+        for fs in services_to_update]
+
+        infra_update = {
+            "project": self.project,
+            "to_add": {
+                "entities": add_entities,
+                "feature_views": add_feature_views,
+                "odfvs": add_odfvs,
+                "feature_services": add_feature_services,
+                "feature_tables": add_feature_tables
+            }
+        }
+
         if not partial:
             # Delete all registry objects that should not exist.
             entities_to_delete = [
@@ -557,6 +589,39 @@ class FeatureStore:
                     table.name, project=self.project, commit=False
                 )
 
+        delete_odfvs = [o.name for o in odfvs_to_delete]
+        delete_feature_tables = [ft.name for ft in tables_to_delete]
+
+        delete_entities = [{
+            'name': ent.name,
+            'data_type': ent.value_type.name
+            }
+            for ent in entities_to_delete]
+
+        delete_feature_views = [{
+            'name': fv.name,
+            'entities': fv.entities
+        }
+        for fv in views_to_delete]
+
+        delete_feature_services = [{
+            'name': fs.name,
+            'features': fs.features
+        }
+        for fs in services_to_delete]
+
+        infra_update["to_delete"] = {
+            "entities": delete_entities,
+            "feature_views": delete_feature_views,
+            "odfvs": delete_odfvs,
+            "feature_services": delete_feature_services,
+            "feature_tables": delete_feature_tables
+        }
+
+        if "dkuberegistrystore" == self._registry._registry_store.__class__.__name__.lower():
+            self._registry.update_newly_added_attrs(self.project, infra_update)
+            self._registry.validate_infra_update(infra_update)
+
         self._get_provider().update_infra(
             project=self.project,
             tables_to_delete=views_to_delete + tables_to_delete if not partial else [],
@@ -566,7 +631,11 @@ class FeatureStore:
             partial=partial,
         )
 
-        self._registry.commit()
+        if "dkuberegistrystore" == self._registry._registry_store.__class__.__name__.lower():
+            self._registry.commit(
+                project=self.project, to_add=infra_update['to_add'], to_delete=infra_update['to_delete'])
+        else:
+            self._registry.commit()
 
     @log_exceptions_and_usage
     def teardown(self):
@@ -581,7 +650,7 @@ class FeatureStore:
         entities = self.list_entities()
 
         self._get_provider().teardown_infra(self.project, tables, entities)
-        self._registry.teardown()
+        self._registry.teardown(project=self.project)
 
     @log_exceptions_and_usage
     def get_historical_features(
@@ -753,6 +822,13 @@ class FeatureStore:
             <BLANKLINE>
             ...
         """
+        if "dkuberegistrystore" == self._registry._registry_store.__class__.__name__.lower():
+            # Proxy materialize call to online server.
+            self._get_provider().proxy_materialize_incremental(
+                end_date, feature_views
+            )
+            return
+
         feature_views_to_materialize: List[FeatureView] = []
         if feature_views is None:
             feature_views_to_materialize = self._list_feature_views(
@@ -845,6 +921,13 @@ class FeatureStore:
                 f"The given start_date {start_date} is greater than the given end_date {end_date}."
             )
 
+        if "dkuberegistrystore" == self._registry._registry_store.__class__.__name__.lower():
+            # Proxy materialize call to online server.
+            self._get_provider().proxy_materialize(
+                start_date, end_date, feature_views
+            )
+            return
+
         feature_views_to_materialize: List[FeatureView] = []
         if feature_views is None:
             feature_views_to_materialize = self._list_feature_views(
diff --git a/sdk/python/feast/infra/passthrough_provider.py b/sdk/python/feast/infra/passthrough_provider.py
index 34bf4902..1b2f4392 100644
--- a/sdk/python/feast/infra/passthrough_provider.py
+++ b/sdk/python/feast/infra/passthrough_provider.py
@@ -180,3 +180,22 @@ class PassthroughProvider(Provider):
             full_feature_names=full_feature_names,
         )
         return job
+
+    def proxy_materialize(
+        self,
+        start_date: datetime,
+        end_date: datetime,
+        feature_views:Optional[List[str]] = None
+    ) -> None:
+        self.online_store.process_materialize(
+            self.repo_config, start_date, end_date, feature_views
+        )
+
+    def proxy_materialize_incremental(
+        self,
+        end_date: datetime,
+        feature_views:Optional[List[str]] = None
+    ) -> None:
+        self.online_store.process_materialize_incremental(
+            self.repo_config, end_date, feature_views
+        )
diff --git a/sdk/python/feast/registry.py b/sdk/python/feast/registry.py
index 8cb646f6..55ba1897 100644
--- a/sdk/python/feast/registry.py
+++ b/sdk/python/feast/registry.py
@@ -14,7 +14,7 @@
 
 from datetime import datetime, timedelta
 from pathlib import Path
-from typing import Dict, List, Optional
+from typing import Dict, List, Optional, Set, Tuple, Union
 from urllib.parse import urlparse
 
 from google.protobuf.internal.containers import RepeatedCompositeFieldContainer
@@ -116,10 +116,13 @@ class Registry:
             else 0
         )
 
-    def _initialize_registry(self):
+    def _initialize_registry(self, project:str=None):
         """Explicitly initializes the registry with an empty proto if it doesn't exist."""
         try:
-            self._get_registry_proto()
+            if project:
+                self._get_registry_proto(project=project)
+            else:
+                self._get_registry_proto()
         except FileNotFoundError:
             registry_proto = RegistryProto()
             registry_proto.registry_schema_version = REGISTRY_SCHEMA_VERSION
@@ -165,7 +168,7 @@ class Registry:
         Returns:
             List of entities
         """
-        registry_proto = self._get_registry_proto(allow_cache=allow_cache)
+        registry_proto = self._get_registry_proto(allow_cache=allow_cache, project=project)
         entities = []
         for entity_proto in registry_proto.entities:
             if entity_proto.spec.project == project:
@@ -185,7 +188,7 @@ class Registry:
         feature_service_proto = feature_service.to_proto()
         feature_service_proto.spec.project = project
 
-        registry = self._prepare_registry_for_changes()
+        registry = self._prepare_registry_for_changes(project=project)
 
         for idx, existing_feature_service_proto in enumerate(registry.feature_services):
             if (
@@ -212,7 +215,7 @@ class Registry:
             List of feature services
         """
 
-        registry = self._get_registry_proto(allow_cache=allow_cache)
+        registry = self._get_registry_proto(allow_cache=allow_cache, project=project)
         feature_services = []
         for feature_service_proto in registry.feature_services:
             if feature_service_proto.spec.project == project:
@@ -235,7 +238,7 @@ class Registry:
             Returns either the specified feature service, or raises an exception if
             none is found
         """
-        registry = self._get_registry_proto(allow_cache=allow_cache)
+        registry = self._get_registry_proto(allow_cache=allow_cache, project=project)
 
         for feature_service_proto in registry.feature_services:
             if (
@@ -257,7 +260,7 @@ class Registry:
             Returns either the specified entity, or raises an exception if
             none is found
         """
-        registry_proto = self._get_registry_proto(allow_cache=allow_cache)
+        registry_proto = self._get_registry_proto(allow_cache=allow_cache, project=project)
         for entity_proto in registry_proto.entities:
             if entity_proto.spec.name == name and entity_proto.spec.project == project:
                 return Entity.from_proto(entity_proto)
@@ -277,7 +280,7 @@ class Registry:
         feature_table.is_valid()
         feature_table_proto = feature_table.to_proto()
         feature_table_proto.spec.project = project
-        self._prepare_registry_for_changes()
+        self._prepare_registry_for_changes(project=project)
         assert self.cached_registry_proto
 
         for idx, existing_feature_table_proto in enumerate(
@@ -308,7 +311,7 @@ class Registry:
         feature_view.ensure_valid()
         feature_view_proto = feature_view.to_proto()
         feature_view_proto.spec.project = project
-        self._prepare_registry_for_changes()
+        self._prepare_registry_for_changes(project=project)
         assert self.cached_registry_proto
 
         self._check_conflicting_feature_view_names(feature_view)
@@ -362,7 +365,7 @@ class Registry:
             List of on demand feature views
         """
 
-        registry = self._get_registry_proto(allow_cache=allow_cache)
+        registry = self._get_registry_proto(allow_cache=allow_cache, project=project)
         on_demand_feature_views = []
         for on_demand_feature_view in registry.on_demand_feature_views:
             if on_demand_feature_view.spec.project == project:
@@ -385,7 +388,7 @@ class Registry:
             Returns either the specified on demand feature view, or raises an exception if
             none is found
         """
-        registry = self._get_registry_proto(allow_cache=allow_cache)
+        registry = self._get_registry_proto(allow_cache=allow_cache, project=project)
 
         for on_demand_feature_view in registry.on_demand_feature_views:
             if (
@@ -413,7 +416,7 @@ class Registry:
             end_date (datetime): End date of the materialization interval to track
             commit: Whether the change should be persisted immediately
         """
-        self._prepare_registry_for_changes()
+        self._prepare_registry_for_changes(project=project)
         assert self.cached_registry_proto
 
         for idx, existing_feature_view_proto in enumerate(
@@ -449,7 +452,7 @@ class Registry:
         Returns:
             List of feature tables
         """
-        registry_proto = self._get_registry_proto()
+        registry_proto = self._get_registry_proto(project=project)
         feature_tables = []
         for feature_table_proto in registry_proto.feature_tables:
             if feature_table_proto.spec.project == project:
@@ -469,7 +472,7 @@ class Registry:
         Returns:
             List of feature views
         """
-        registry_proto = self._get_registry_proto(allow_cache=allow_cache)
+        registry_proto = self._get_registry_proto(allow_cache=allow_cache, project=project)
         feature_views: List[FeatureView] = []
         for feature_view_proto in registry_proto.feature_views:
             if feature_view_proto.spec.project == project:
@@ -489,7 +492,7 @@ class Registry:
         Returns:
             List of feature views
         """
-        registry_proto = self._get_registry_proto(allow_cache=allow_cache)
+        registry_proto = self._get_registry_proto(allow_cache=allow_cache, project=project)
         feature_views: List[RequestFeatureView] = []
         for request_feature_view_proto in registry_proto.request_feature_views:
             if request_feature_view_proto.spec.project == project:
@@ -510,7 +513,7 @@ class Registry:
             Returns either the specified feature table, or raises an exception if
             none is found
         """
-        registry_proto = self._get_registry_proto()
+        registry_proto = self._get_registry_proto(project=project)
         for feature_table_proto in registry_proto.feature_tables:
             if (
                 feature_table_proto.spec.name == name
@@ -534,7 +537,7 @@ class Registry:
             Returns either the specified feature view, or raises an exception if
             none is found
         """
-        registry_proto = self._get_registry_proto(allow_cache=allow_cache)
+        registry_proto = self._get_registry_proto(allow_cache=allow_cache, project=project)
         for feature_view_proto in registry_proto.feature_views:
             if (
                 feature_view_proto.spec.name == name
@@ -552,7 +555,7 @@ class Registry:
             project: Feast project that this feature service belongs to
             commit: Whether the change should be persisted immediately
         """
-        self._prepare_registry_for_changes()
+        self._prepare_registry_for_changes(project=project)
         assert self.cached_registry_proto
 
         for idx, feature_service_proto in enumerate(
@@ -577,7 +580,7 @@ class Registry:
             project: Feast project that this feature table belongs to
             commit: Whether the change should be persisted immediately
         """
-        self._prepare_registry_for_changes()
+        self._prepare_registry_for_changes(project=project)
         assert self.cached_registry_proto
 
         for idx, existing_feature_table_proto in enumerate(
@@ -603,7 +606,7 @@ class Registry:
             project: Feast project that this feature view belongs to
             commit: Whether the change should be persisted immediately
         """
-        self._prepare_registry_for_changes()
+        self._prepare_registry_for_changes(project=project)
         assert self.cached_registry_proto
 
         for idx, existing_feature_view_proto in enumerate(
@@ -641,7 +644,7 @@ class Registry:
             project: Feast project that this entity belongs to
             commit: Whether the change should be persisted immediately
         """
-        self._prepare_registry_for_changes()
+        self._prepare_registry_for_changes(project=project)
         assert self.cached_registry_proto
 
         for idx, existing_entity_proto in enumerate(
@@ -658,23 +661,36 @@ class Registry:
 
         raise EntityNotFoundException(name, project)
 
-    def commit(self):
+    def commit(self, **kwargs):
         """Commits the state of the registry cache to the remote registry store."""
-        if self.cached_registry_proto:
+        if "dkuberegistrystore" == self._registry_store.__class__.__name__.lower():
+            assert 'to_add' in kwargs
+            assert 'to_delete' in kwargs
+            if self.cached_registry_proto:
+                self._registry_store.update_registry_proto(self.cached_registry_proto, **kwargs)
+        elif self.cached_registry_proto:
             self._registry_store.update_registry_proto(self.cached_registry_proto)
 
-    def refresh(self):
+    def validate_infra_update(self, update_infra):
+        if "dkuberegistrystore" == self._registry_store.__class__.__name__.lower():
+            self._registry_store.validate_infra_update_with_registry(update_infra)
+
+    def refresh(self, project: str=None):
         """Refreshes the state of the registry cache by fetching the registry state from the remote registry store."""
-        self._get_registry_proto(allow_cache=False)
+        self._get_registry_proto(allow_cache=False, project=project)
 
-    def teardown(self):
+    def teardown(self, **kwargs):
         """Tears down (removes) the registry."""
-        self._registry_store.teardown()
+        if "dkuberegistrystore" == self._registry_store.__class__.__name__.lower():
+            assert 'project' in kwargs
+            self._registry_store.teardown(project=kwargs['project'])
+        else:
+            self._registry_store.teardown()
 
-    def _prepare_registry_for_changes(self):
+    def _prepare_registry_for_changes(self, project: str=None):
         """Prepares the Registry for changes by refreshing the cache if necessary."""
         try:
-            self._get_registry_proto(allow_cache=True)
+            self._get_registry_proto(allow_cache=True, project=project)
         except FileNotFoundError:
             registry_proto = RegistryProto()
             registry_proto.registry_schema_version = REGISTRY_SCHEMA_VERSION
@@ -682,7 +698,7 @@ class Registry:
             self.cached_registry_proto_created = datetime.now()
         return self.cached_registry_proto
 
-    def _get_registry_proto(self, allow_cache: bool = False) -> RegistryProto:
+    def _get_registry_proto(self, allow_cache: bool = False, project: str = None) -> RegistryProto:
         """Returns the cached or remote registry state
 
         Args:
@@ -706,7 +722,10 @@ class Registry:
 
         try:
             self.cache_being_updated = True
-            registry_proto = self._registry_store.get_registry_proto()
+            if "dkuberegistrystore" == self._registry_store.__class__.__name__.lower():
+                registry_proto = self._registry_store.get_registry_proto(project=project)
+            else:
+                registry_proto = self._registry_store.get_registry_proto()
             self.cached_registry_proto = registry_proto
             self.cached_registry_proto_created = datetime.now()
         except Exception as e:
@@ -734,3 +753,57 @@ class Registry:
             fv.spec.name: fv for fv in self.cached_registry_proto.request_feature_views
         }
         return {**odfvs, **fvs, **request_fvs}
+
+    def get_existing_project_attrs(self, project):
+        registry_proto = self._registry_store.get_registry_proto(project=project)
+        existing_entities = {
+            ent.spec.name: ent
+            for ent in registry_proto.entities
+        }
+        existing_feature_svcs ={
+            fsvc.spec.name: fsvc
+            for fsvc in registry_proto.feature_services
+        }
+        existing_feature_tables = {
+            ft.spec.name: ft
+            for ft in registry_proto.feature_tables
+        }
+        existing_odfvs = {
+            fv.spec.name: fv
+            for fv in registry_proto.on_demand_feature_views
+        }
+        existing_fvs = {fv.spec.name: fv for fv in registry_proto.feature_views}
+        existing_request_fvs = {
+            fv.spec.name: fv for fv in registry_proto.request_feature_views
+        }
+
+        existing_attrs = {
+            "entities": existing_entities,
+            "feature_services": existing_feature_svcs,
+            "feature_tables": existing_feature_tables,
+            "odfvs": existing_odfvs,
+            "feature_views": existing_fvs,
+            "request_feature_views": existing_request_fvs
+
+        }
+        return existing_attrs
+
+    def update_newly_added_attrs(self, project, infra_update):
+        existing_attrs = self.get_existing_project_attrs(project=project)
+        to_add = infra_update["to_add"]
+        for k, v in to_add.items():
+            if k == "entities":
+                to_add["entities"] = list(filter(
+                    lambda entity: entity["name"] not in existing_attrs["entities"], v))
+            elif k == "feature_views":
+                to_add["feature_views"] = list(filter(
+                    lambda fv: fv["name"] not in existing_attrs["feature_views"], v))
+            elif k == "odfvs":
+                to_add["odfvs"] = list(filter(
+                    lambda odfv: odfv not in existing_attrs["odfvs"], v))
+            elif k == "feature_services":
+                to_add["feature_services"] = list(filter(
+                    lambda fsvc: fsvc["name"] not in existing_attrs["feature_services"], v))
+            elif k == "feature_tables":
+                to_add["feature_tables"] = list(filter(
+                    lambda ft: ft not in existing_attrs["feature_tables"], v))
diff --git a/sdk/python/feast/repo_operations.py b/sdk/python/feast/repo_operations.py
index a4ead6d0..b9e32b02 100644
--- a/sdk/python/feast/repo_operations.py
+++ b/sdk/python/feast/repo_operations.py
@@ -141,7 +141,10 @@ def apply_total(repo_config: RepoConfig, repo_path: Path, skip_source_validation
         )
         sys.exit(1)
     registry = store.registry
-    registry._initialize_registry()
+    if "dkuberegistrystore" == registry._registry_store.__class__.__name__.lower():
+        registry._initialize_registry(project=project)
+    else:
+        registry._initialize_registry()
     sys.dont_write_bytecode = True
     repo = parse_repo(repo_path)
 
